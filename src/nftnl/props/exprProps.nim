import ../../autogenerated/generated_nftnl
import ../../raii/basics
import ../../attrs/exprAttrsCoersion
import ../../contracts/expr/cmp # optional for typed sub-exprs (e.g. cmp ops)
import ../../contracts/expr/exprConcept

## ---------------------------------------------------------------------------
## Expression properties + sugar layer
## ---------------------------------------------------------------------------

proc kind*(e: Expression): string =
  ## Returns the string name of this expression (e.g. "cmp", "payload", "meta").
  if e.raw.isNil:
    return ""
  e.rawGetAttr[string](uint16(NFTNL_EXPR_NAME))

proc `kind=`*(e: var Expression, v: string) =
  ## Changes the expression kind (usually set by Expression.create()).
  if not e.raw.isNil:
    e.rawSetAttr(uint16(NFTNL_EXPR_NAME), v)

## ---------------------------------------------------------------------------
## Sugar constructors and ownership helpers
## ---------------------------------------------------------------------------

template newExpr*(kind: string): Expression =
  ## High-level constructor for a new expression.
  Expression.create(kind)

template moveExpr*(e: Expression): Expression =
  ## Optional explicit move sugar.
  move e

## ---------------------------------------------------------------------------
## Common expression convenience builders
## ---------------------------------------------------------------------------

template cmpExpr*(op: uint32, sreg: uint32, dreg: uint32, data: string): Expression =
  ## Construct a 'cmp' expression with the provided operator and operands.
  var e = newExpr("cmp")
  e.rawSetAttr(uint16(NFTNL_EXPR_CMP_OP), op)
  e.rawSetAttr(uint16(NFTNL_EXPR_CMP_SREG), sreg)
  e.rawSetAttr(uint16(NFTNL_EXPR_CMP_DREG), dreg)
  e.rawSetAttr(uint16(NFTNL_EXPR_CMP_DATA), data)
  e

template payloadExpr*(base: string, offset, len: uint32): Expression =
  ## Construct a 'payload' expression describing a packet field.
  var e = newExpr("payload")
  e.rawSetAttr(uint16(NFTNL_EXPR_PAYLOAD_BASE), base)
  e.rawSetAttr(uint16(NFTNL_EXPR_PAYLOAD_OFFSET), offset)
  e.rawSetAttr(uint16(NFTNL_EXPR_PAYLOAD_LEN), len)
  e

template metaExpr*(key, dreg: uint32): Expression =
  ## Construct a 'meta' expression (e.g. for metadata matching).
  var e = newExpr("meta")
  e.rawSetAttr(uint16(NFTNL_EXPR_META_KEY), key)
  e.rawSetAttr(uint16(NFTNL_EXPR_META_DREG), dreg)
  e

## ---------------------------------------------------------------------------
## Rule integration sugar
## ---------------------------------------------------------------------------

template addTo*(e: Expression, r: var Rule) =
  ## Move this expression into the given Rule.
  addExpr(r, move e)

template add*(r: var Rule, e: Expression) =
  ## Alternate syntax, same as e.addTo(r).
  addExpr(r, move e)
