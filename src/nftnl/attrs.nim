import macros
import ./autogenerated/generated_nftnl
import ./basics

# --- raw API stays as-is ---
proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: string) =
  discard nftnl_table_set_str(t, attr, cast[ptr uint8](v.cstring))

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint32) =
  nftnl_table_set_u32(t, attr, v)

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint64) =
  nftnl_table_set_u64(t, attr, v)

proc rawGetAttr*[T](t: ptr struct_nftnl_table, attr: uint16, _: typedesc[T]): T =
  when T is string:
    $cast[cstring](nftnl_table_get_str(t, attr))
  elif T is uint32:
    nftnl_table_get_u32(t, attr)
  elif T is uint64:
    nftnl_table_get_u64(t, attr)
  else:
    {.error: "Unsupported type for rawGetAttr".}

# --- helper: map attr -> Nim type at compile-time ---
template expectedType(attr: static enum_nftnl_table_attr): untyped =
  when attr in {NFTNL_TABLE_NAME, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER}:
    string
  elif attr in {NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE}:
    uint32
  elif attr in {NFTNL_TABLE_HANDLE}:
    uint64
  else:
    {.error: "Unsupported attribute".}

# --- single macro implementing both getter and setter ---
macro attrOp*(t: typed, attr: typed, args: varargs[untyped]): untyped =
  # Validate `attr` is one of our enum symbols
  if attr.kind notin {nnkSym, nnkIdent}:
    error("attr must be an enum symbol", attr)

  # Build a typed `when` to select the expected type at CT
  let getterBody = quote:
    when `attr` in {NFTNL_TABLE_NAME, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER}:
      rawGetAttr[string](`t`.raw, `attr`.uint16, string)
    elif `attr` in {NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE}:
      rawGetAttr[uint32](`t`.raw, `attr`.uint16, uint32)
    elif `attr` in {NFTNL_TABLE_HANDLE}:
      rawGetAttr[uint64](`t`.raw, `attr`.uint16, uint64)
    else:
      {.error: "Unsupported attribute".}

  let setterBody = quote:
    when `attr` in {NFTNL_TABLE_NAME, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER}:
      block:
        let v: string = `args [ 0 ]` # compile-time type check here
        rawSetAttr(`t`.raw, `attr`.uint16, v)
    elif `attr` in {NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE}:
      block:
        let v: uint32 = `args [ 0 ]` # must be convertible to uint32 at CT
        rawSetAttr(`t`.raw, `attr`.uint16, v)
    elif `attr` in {NFTNL_TABLE_HANDLE}:
      block:
        let v: uint64 = `args [ 0 ]`
        rawSetAttr(`t`.raw, `attr`.uint16, v)
    else:
      {.error: "Unsupported attribute".}

  if args.len == 0:
    result = getterBody
  elif args.len == 1:
    result = setterBody
  else:
    error("attrOp takes 0 or 1 extra arguments", args[1])

# --- convenience wrappers ---
template setAttr*(t: Table, attr: enum_nftnl_table_attr, val: untyped): untyped =
  attrOp(t, attr, val)

template getAttr*(t: Table, attr: enum_nftnl_table_attr): untyped =
  attrOp(t, attr)
