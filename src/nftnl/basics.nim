import ./autogenerated/generated_nftnl

template makeWrapper(typeName, structName, allocFn, freeFn: untyped) =
  type `typeName`* = object
    raw*: ptr `structName`

  proc create*(_: type `typeName`): `typeName` =
    `typeName`(raw: allocFn())

  proc `=destroy`*(x: var `typeName`) =
    if not x.raw.isNil:
      freeFn(x.raw)
      x.raw = nil

# RAII Wrappers for nftnl types

# Table
# ├── Chain
# │    └── Rule
# │         └── Expression (matches, actions, etc.)
# └── Set (optional, used by rules)

# A **Table** is the top-level container (per family like `inet`, `ip`, etc.).
# It holds chains and sets. This wrapper allocates/frees `struct_nftnl_table`.
makeWrapper(Table, struct_nftnl_table, nftnl_table_alloc, nftnl_table_free)

# A **Chain** lives inside a table. It is an ordered list of rules and can
# be attached to a kernel hook (input, output, forward, etc.). This wrapper
# allocates/frees `struct_nftnl_chain`.
makeWrapper(Chain, struct_nftnl_chain, nftnl_chain_alloc, nftnl_chain_free)

# A **Rule** lives inside a chain. Rules contain the matching logic and
# verdicts (accept, drop, jump, etc.). This wrapper allocates/frees
# `struct_nftnl_rule`.
makeWrapper(Rule, struct_nftnl_rule, nftnl_rule_alloc, nftnl_rule_free)

# A **Set** is a reusable collection of values (IPs, ports, etc.) referenced
# by rules. Sets make rules cleaner and faster. This wrapper allocates/frees
# `struct_nftnl_set`.
makeWrapper(Set, struct_nftnl_set, nftnl_set_alloc, nftnl_set_free)

# Holds multiple tables
makeWrapper(
  TableList, struct_nftnl_table_list, nftnl_table_list_alloc, nftnl_table_list_free
)

# Holds multiple chains
makeWrapper(
  ChainList, struct_nftnl_chain_list, nftnl_chain_list_alloc, nftnl_chain_list_free
)

# Holds multiple rules
makeWrapper(
  RuleList, struct_nftnl_rule_list, nftnl_rule_list_alloc, nftnl_rule_list_free
)

# Holds multiple sets
makeWrapper(SetList, struct_nftnl_set_list, nftnl_set_list_alloc, nftnl_set_list_free)

# Holds multiple set elements
makeWrapper(SetElem, struct_nftnl_set_elem, nftnl_set_elem_alloc, nftnl_set_elem_free)
