import ../../autogenerated/generated_nftnl
import ../../raii/expresions
import ../../../linux/autogenerated/generated_linux
import ./all # generic helpers (getU32, getBlob, setU32, setBlob)

# --- ids --------------------------------------------------------
const
  idCmpSreg* = uint16(NFTNL_EXPR_CMP_SREG)
  idCmpOp* = uint16(NFTNL_EXPR_CMP_OP)
  idCmpData* = uint16(NFTNL_EXPR_CMP_DATA)

# --- high-level typed bridges -----------------------------------

proc getCmpSreg*(e: CmpExpr): uint32 =
  getU32(toRaw(e), idCmpSreg)

proc setCmpSreg*(e: CmpExpr, v: uint32) =
  setU32(toRaw(e), idCmpSreg, v)

proc getCmpOp*(e: CmpExpr): uint32 =
  getU32(toRaw(e), idCmpOp)

proc setCmpOp*(e: CmpExpr, v: uint32) =
  setU32(toRaw(e), idCmpOp, v)

proc getCmpData*(e: CmpExpr): seq[uint8] =
  getBlob(toRaw(e), idCmpData)

proc setCmpData*(e: CmpExpr, v: seq[uint8]) =
  setBlob(toRaw(e), idCmpData, v)

proc sreg*(e: CmpExpr): uint32 =
  getCmpSreg(e)

proc `sreg=`*(e: CmpExpr, v: uint32) =
  setCmpSreg(e, v)

proc op*(e: CmpExpr): enum_nft_cmp_ops =
  enum_nft_cmp_ops(getCmpOp(e))

proc `op=`*(e: CmpExpr, v: enum_nft_cmp_ops) =
  setCmpOp(e, v.uint32)

proc data*(e: CmpExpr): seq[uint8] =
  getCmpData(e)

proc `data=`*(e: CmpExpr, v: seq[uint8]) =
  setCmpData(e, v)
