import macros
import ../autogenerated/generated_nftnl
import ../raii/basics
import ../helpers

# --- expected type mapping ----------------------------------------------------
template expectedType*(attr: static enum_nftnl_chain_attr): untyped =
  when attr in {
    NFTNL_CHAIN_NAME, NFTNL_CHAIN_TABLE, NFTNL_CHAIN_TYPE, NFTNL_CHAIN_DEV,
    NFTNL_CHAIN_USERDATA,
  }:
    string
  elif attr in
      {NFTNL_CHAIN_FAMILY, NFTNL_CHAIN_HOOKNUM, NFTNL_CHAIN_PRIO, NFTNL_CHAIN_POLICY}:
    uint32
  elif attr in {NFTNL_CHAIN_HANDLE}:
    uint64
  else:
    {.error: "Unsupported chain attribute: " & $attr.}

# --- raw unified coercion -----------------------------------------------------
proc rawGetAttr*[T](c: ptr struct_nftnl_chain, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_chain_get_str(c, attr))
  elif T is uint32:
    nftnl_chain_get_u32(c, attr)
  elif T is uint64:
    nftnl_chain_get_u64(c, attr)
  else:
    {.error: "Unsupported type".}

# Set an attribute on a chain, dispatching by value type.
proc rawSetAttr*(c: ptr struct_nftnl_chain, attr: uint16, v: auto) =
  when typeof(v) is string:
    discard nftnl_chain_set_str(c, attr, cast[ptr uint8](v.cstring))
  elif typeof(v) is uint32:
    nftnl_chain_set_u32(c, attr, v)
  elif typeof(v) is uint64:
    nftnl_chain_set_u64(c, attr, v)
  elif typeof(v) is SomeInteger or typeof(v) is enum:
    let val = v.asIntLike
    when fitsU32(val):
      nftnl_chain_set_u32(c, attr, val.toCWidth)
    else:
      nftnl_chain_set_u64(c, attr, val.toCWidth)
  else:
    {.error: "Unsupported type".}

# --- macro sugar --------------------------------------------------------------
macro attrOp*(c: typed, attr: enum_nftnl_chain_attr, args: varargs[untyped]): untyped =
  result =
    if args.len == 0:
      quote:
        rawGetAttr[expectedType(`attr`)](`c`.raw, `attr`.uint16)
    elif args.len == 1:
      quote:
        rawSetAttr(`c`.raw, `attr`.uint16, `args [ 0 ]`)
    else:
      error "attrOp takes 0 or 1 arguments"

# --- convenience wrappers -----------------------------------------------------
template setAttr*(c: Chain, attr: enum_nftnl_chain_attr, val: untyped): untyped =
  attrOp(c, attr, val)

template getAttr*(c: Chain, attr: enum_nftnl_chain_attr): untyped =
  attrOp(c, attr)

template defChainProp(attr: static enum_nftnl_chain_attr, propName: untyped) =
  proc propName*(c: Chain): expectedType(attr) =
    c.getAttr(attr)

  proc `propName=`*(c: Chain, v: expectedType(attr)) =
    c.setAttr(attr, v)

# String properties
defChainProp(NFTNL_CHAIN_NAME, name)
defChainProp(NFTNL_CHAIN_TABLE, table)
defChainProp(NFTNL_CHAIN_TYPE, typeName)
defChainProp(NFTNL_CHAIN_DEV, dev)
defChainProp(NFTNL_CHAIN_USERDATA, userdata)

# uint32 properties
defChainProp(NFTNL_CHAIN_FAMILY, family)
defChainProp(NFTNL_CHAIN_HOOKNUM, hooknum)
defChainProp(NFTNL_CHAIN_PRIO, prio)
defChainProp(NFTNL_CHAIN_POLICY, policy)

# uint64 properties
defChainProp(NFTNL_CHAIN_HANDLE, handle)
