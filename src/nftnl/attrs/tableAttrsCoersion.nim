import macros
import ../autogenerated/generated_nftnl
import ../raii/basics
import ../contracts/table

# --- raw API
# ------------------------------------------------------

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: string) =
  discard nftnl_table_set_str(t, attr, cast[ptr uint8](v.cstring))

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint32) =
  nftnl_table_set_u32(t, attr, v)

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint64) =
  nftnl_table_set_u64(t, attr, v)

# --- Coersion
# ------------------------------------------------------

proc rawGetAttr*[T](t: ptr struct_nftnl_table, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_table_get_str(t, attr))
  elif T is uint32:
    nftnl_table_get_u32(t, attr)
  elif T is uint64:
    nftnl_table_get_u64(t, attr)
  else:
    {.error: "Unsupported type for rawGetAttr".}

proc rawSetAttr*[T](t: ptr struct_nftnl_table, attr: uint16, v: T) =
  when T is string:
    rawSetAttr(t, attr, v)
  elif T is SomeInteger: # handle int-like
    when sizeof(T) <= 4:
      rawSetAttr(t, attr, v.uint32)
    else:
      rawSetAttr(t, attr, v.uint64)
  elif T is uint32:
    rawSetAttr(t, attr, v)
  elif T is uint64:
    rawSetAttr(t, attr, v)
  else:
    {.error: "Unsupported type for rawSetAttrTyped".}

# --- le macro
# ------------------------------------------------------

macro attrOp*(t: typed, attr: enum_nftnl_table_attr, args: varargs[untyped]): untyped =
  if args.len == 0:
    result = quote:
      rawGetAttr[expectedType(`attr`)](`t`.raw, `attr`.uint16)
  elif args.len == 1:
    let arg0 = args[0]
    result = quote:
      rawSetAttr[expectedType(`attr`)](`t`.raw, `attr`.uint16, `arg0`)
  else:
    error("attrOp takes 0 or 1 extra arguments")

# --- convenience wrappers -----------------------------------------------------

template setAttr*(t: Table, attr: enum_nftnl_table_attr, val: untyped): untyped =
  attrOp(t, attr, val)

template getAttr*(t: Table, attr: enum_nftnl_table_attr): untyped =
  attrOp(t, attr)
