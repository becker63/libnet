import macros
import ../autogenerated/generated_nftnl
import ../raii/basics

# --- expected type mapping ----------------------------------------------------
template expectedType*(attr: static enum_nftnl_table_attr): untyped =
  when attr in {NFTNL_TABLE_NAME, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER}:
    string
  elif attr in {NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE}:
    uint32
  elif attr in {NFTNL_TABLE_HANDLE}:
    uint64
  else:
    {.error: "Unsupported table attribute: " & $attr.}

# --- raw unified coercion -----------------------------------------------------
proc rawGetAttr*[T](t: ptr struct_nftnl_table, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_table_get_str(t, attr))
  elif T is uint32:
    nftnl_table_get_u32(t, attr)
  elif T is uint64:
    nftnl_table_get_u64(t, attr)
  else:
    {.error: "Unsupported type".}

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: auto) =
  when typeof(v) is string:
    discard nftnl_table_set_str(t, attr, cast[ptr uint8](v.cstring))
  elif typeof(v) is uint32:
    nftnl_table_set_u32(t, attr, v)
  elif typeof(v) is uint64:
    nftnl_table_set_u64(t, attr, v)
  elif typeof(v) is SomeInteger:
    when sizeof(v) <= 4:
      nftnl_table_set_u32(t, attr, v.uint32)
    else:
      nftnl_table_set_u64(t, attr, v.uint64)
  else:
    {.error: "Unsupported type".}

# --- the one-liner macro ------------------------------------------------------
macro attrOp*(t: typed, attr: enum_nftnl_table_attr, args: varargs[untyped]): untyped =
  result =
    if args.len == 0:
      quote:
        rawGetAttr[expectedType(`attr`)](`t`.raw, `attr`.uint16)
    elif args.len == 1:
      quote:
        rawSetAttr(`t`.raw, `attr`.uint16, `args [ 0 ]`)
    else:
      error "attrOp takes 0 or 1 arguments"

# --- convenience --------------------------------------------------------------
template setAttr*(t: Table, attr: enum_nftnl_table_attr, val: untyped): untyped =
  attrOp(t, attr, val)

template getAttr*(t: Table, attr: enum_nftnl_table_attr): untyped =
  attrOp(t, attr)
