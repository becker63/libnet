import macros
import ../autogenerated/generated_nftnl
import ../raii/basics
import ../contracts/rule

# --- raw API ------------------------------------------------------

proc rawSetAttr*(r: ptr struct_nftnl_rule, attr: uint16, v: string) =
  discard nftnl_rule_set_str(r, attr, cast[ptr uint8](v.cstring))

proc rawSetAttr*(r: ptr struct_nftnl_rule, attr: uint16, v: uint32) =
  nftnl_rule_set_u32(r, attr, v)

proc rawSetAttr*(r: ptr struct_nftnl_rule, attr: uint16, v: uint64) =
  nftnl_rule_set_u64(r, attr, v)

# --- Coercion -----------------------------------------------------

proc rawGetAttr*[T](r: ptr struct_nftnl_rule, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_rule_get_str(r, attr))
  elif T is uint32:
    nftnl_rule_get_u32(r, attr)
  elif T is uint64:
    nftnl_rule_get_u64(r, attr)
  else:
    {.error: "Unsupported type for rawGetAttr".}

proc rawSetAttr*[T](r: ptr struct_nftnl_rule, attr: uint16, v: T) =
  when T is string:
    rawSetAttr(r, attr, v)
  elif T is SomeInteger:
    when sizeof(T) <= 4:
      rawSetAttr(r, attr, v.uint32)
    else:
      rawSetAttr(r, attr, v.uint64)
  elif T is uint32:
    rawSetAttr(r, attr, v)
  elif T is uint64:
    rawSetAttr(r, attr, v)
  else:
    {.error: "Unsupported type for rawSetAttrTyped".}

# --- le macro -----------------------------------------------------

macro attrOp*(r: typed, attr: enum_nftnl_rule_attr, args: varargs[untyped]): untyped =
  if args.len == 0:
    result = quote:
      rawGetAttr[expectedType(`attr`)](`r`.raw, `attr`.uint16)
  elif args.len == 1:
    let arg0 = args[0]
    result = quote:
      rawSetAttr[expectedType(`attr`)](`r`.raw, `attr`.uint16, `arg0`)
  else:
    error("attrOp takes 0 or 1 extra arguments")

# --- convenience wrappers ----------------------------------------

template setAttr*(r: Rule, attr: enum_nftnl_rule_attr, val: untyped): untyped =
  attrOp(r, attr, val)

template getAttr*(r: Rule, attr: enum_nftnl_rule_attr): untyped =
  attrOp(r, attr)
