import macros
import ../autogenerated/generated_nftnl
import ../raii/basics
import ../helpers

# --- expected type mapping ----------------------------------------------------
template expectedType*(attr: static enum_nftnl_rule_attr): untyped =
  when attr in {NFTNL_RULE_TABLE, NFTNL_RULE_CHAIN, NFTNL_RULE_USERDATA}:
    string
  elif attr in {NFTNL_RULE_FAMILY, NFTNL_RULE_COMPAT_PROTO, NFTNL_RULE_COMPAT_FLAGS}:
    uint32
  elif attr in {NFTNL_RULE_HANDLE}:
    uint64
  else:
    {.error: "Unsupported rule attribute: " & $attr.}

# --- raw unified coercion -----------------------------------------------------
proc rawGetAttr*[T](r: ptr struct_nftnl_rule, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_rule_get_str(r, attr))
  elif T is uint32:
    nftnl_rule_get_u32(r, attr)
  elif T is uint64:
    nftnl_rule_get_u64(r, attr)
  else:
    {.error: "Unsupported type".}

proc rawSetAttr*(r: ptr struct_nftnl_rule, attr: uint16, v: auto) =
  when typeof(v) is string:
    discard nftnl_rule_set_str(r, attr, cast[ptr uint8](v.cstring))
  elif typeof(v) is uint32:
    nftnl_rule_set_u32(r, attr, v)
  elif typeof(v) is uint64:
    nftnl_rule_set_u64(r, attr, v)
  elif typeof(v) is SomeInteger or typeof(v) is enum:
    let val = v.asIntLike
    when fitsU32(val):
      nftnl_rule_set_u32(r, attr, val.toCWidth)
    else:
      nftnl_rule_set_u64(r, attr, val.toCWidth)
  else:
    {.error: "Unsupported type".}

# --- macro sugar --------------------------------------------------------------
macro attrOp*(r: typed, attr: enum_nftnl_rule_attr, args: varargs[untyped]): untyped =
  result =
    if args.len == 0:
      quote:
        rawGetAttr[expectedType(`attr`)](`r`.raw, `attr`.uint16)
    elif args.len == 1:
      quote:
        rawSetAttr(`r`.raw, `attr`.uint16, `args [ 0 ]`)
    else:
      error "attrOp takes 0 or 1 arguments"

# --- convenience wrappers -----------------------------------------------------
template setAttr*(r: Rule, attr: enum_nftnl_rule_attr, val: untyped): untyped =
  attrOp(r, attr, val)

template getAttr*(r: Rule, attr: enum_nftnl_rule_attr): untyped =
  attrOp(r, attr)

template defRuleProp(attr: static enum_nftnl_rule_attr, propName: untyped) =
  proc propName*(r: Rule): expectedType(attr) =
    r.getAttr(attr)

  proc `propName=`*(r: Rule, v: expectedType(attr)) =
    r.setAttr(attr, v)

# --- String properties ---
defRuleProp(NFTNL_RULE_TABLE, table)
defRuleProp(NFTNL_RULE_CHAIN, chain)
defRuleProp(NFTNL_RULE_USERDATA, userdata)

# --- uint32 properties ---
defRuleProp(NFTNL_RULE_FAMILY, family)
defRuleProp(NFTNL_RULE_COMPAT_PROTO, compatProto)
defRuleProp(NFTNL_RULE_COMPAT_FLAGS, compatFlags)

# --- uint64 properties ---
defRuleProp(NFTNL_RULE_HANDLE, handle)
