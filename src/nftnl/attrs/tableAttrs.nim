import macros
import ../autogenerated/generated_nftnl
import ../core/basics

# --- raw API stays as-is ------------------------------------------------------

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: string) =
  discard nftnl_table_set_str(t, attr, cast[ptr uint8](v.cstring))

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint32) =
  nftnl_table_set_u32(t, attr, v)

proc rawSetAttr*(t: ptr struct_nftnl_table, attr: uint16, v: uint64) =
  nftnl_table_set_u64(t, attr, v)

# Simplified: no third typedesc argument needed anymore
proc rawGetAttr*[T](t: ptr struct_nftnl_table, attr: uint16): T =
  when T is string:
    $cast[cstring](nftnl_table_get_str(t, attr))
  elif T is uint32:
    nftnl_table_get_u32(t, attr)
  elif T is uint64:
    nftnl_table_get_u64(t, attr)
  else:
    {.error: "Unsupported type for rawGetAttr".}

# --- const sets to classify attributes ----------------------------------------

const
  StringAttrs* = {NFTNL_TABLE_NAME, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER}
  Uint32Attrs* = {NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE}
  Uint64Attrs* = {NFTNL_TABLE_HANDLE}

# --- type mapping at CT -------------------------------------------------------

template expectedType(attr: static enum_nftnl_table_attr): untyped =
  when attr in StringAttrs:
    string
  elif attr in Uint32Attrs:
    uint32
  elif attr in Uint64Attrs:
    uint64
  else:
    {.error: "Unsupported table attribute: " & $attr.}

# --- macro for getter/setter --------------------------------------------------

macro attrOp*(t: typed, attr: typed, args: varargs[untyped]): untyped =
  if args.len == 0:
    # Getter
    result = quote:
      rawGetAttr[expectedType(`attr`)](`t`.raw, `attr`.uint16)
  elif args.len == 1:
    # Setter
    result = quote:
      block:
        # This will implicitly coerce all inputed int types to u32/u64
        let v: expectedType(`attr`) = `args [ 0 ]`
        rawSetAttr(`t`.raw, `attr`.uint16, v)
  else:
    error("attrOp takes 0 or 1 extra arguments", args[1])

# --- convenience wrappers -----------------------------------------------------

template setAttr*(t: Table, attr: enum_nftnl_table_attr, val: untyped): untyped =
  attrOp(t, attr, val)

template getAttr*(t: Table, attr: enum_nftnl_table_attr): untyped =
  attrOp(t, attr)
