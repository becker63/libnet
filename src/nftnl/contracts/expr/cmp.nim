import macros
import ../../autogenerated/generated_nftnl

const
  # cmp expression attributes (from <libnftnl/expr/cmp.h>)
  #
  # These define how the "cmp" expression compares a register value to
  # some constant data blob.
  #
  # NFTNL_EXPR_CMP_SREG   — source register (u32)
  # NFTNL_EXPR_CMP_OP     — comparison operator (u32)
  # NFTNL_EXPR_CMP_DATA   — data to compare against (blob)
  #
  # Note that libnftnl doesn’t expose a family enum for expr attrs,
  # so we group them manually by type.
  BlobAttrs* = {NFTNL_EXPR_CMP_DATA}
  Uint32Attrs*: set[range[0 .. 65535]] = {NFTNL_EXPR_CMP_SREG, NFTNL_EXPR_CMP_OP}

# You may be asking why exprKind is a string instead of a constant.
# See libnftnl/examples/nft-rule-add.c
# The allocator uses strings as the identifiers
# nftnl_expr_alloc("payload");
# IK gross
template expectedType*(exprKind: static[string], attr: static[int]): untyped =
  ## Provides compile-time typing for "cmp" expression attributes.
  when exprKind == "cmp":
    when attr in BlobAttrs:
      seq[uint8]
    elif attr in Uint32Attrs:
      uint32
    else:
      {.error: "Unsupported cmp expression attribute: " & $attr.}
  else:
    {.error: "Unsupported expr kind for this contract: " & exprKind.}
