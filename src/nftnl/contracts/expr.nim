import ../autogenerated/generated_nftnl

# --- cmp ---------------------------------------------------------------------

type
  ## Enum of all known comparison expression attributes.
  CmpAttrKind* = enum
    cmpSreg = int(NFTNL_EXPR_CMP_SREG)
    cmpOp = int(NFTNL_EXPR_CMP_OP)
    cmpData = int(NFTNL_EXPR_CMP_DATA)

# --- attribute sets -----------------------------------------------------------

const
  ## Attributes that hold binary blobs (seq[uint8])
  CmpBlobAttrs* = {cmpData}
  ## Attributes that hold 32-bit unsigned integers
  CmpUint32Attrs* = {cmpSreg, cmpOp}

# --- type classification ------------------------------------------------------

type
  ## Kinds of value types for attributes (resolved at compile time)
  ValueKind* = enum
    BlobVal
    Uint32Val

# --- compile-time classifiers -------------------------------------------------

proc valueKind*(attr: static CmpAttrKind): ValueKind =
  ## Returns the value category for a compile-time attribute kind.
  when attr in CmpBlobAttrs:
    BlobVal
  elif attr in CmpUint32Attrs:
    Uint32Val
  else:
    {.error: "Unknown CmpAttrKind: " & $attr.}

template ValueT*(attr: static CmpAttrKind): untyped =
  ## Maps an attribute kind to its value type at compile time.
  when valueKind(attr) == BlobVal:
    seq[uint8]
  elif valueKind(attr) == Uint32Val:
    uint32
  else:
    {.error: "Unsupported CmpAttrKind: " & $attr.}

# --- attribute ID helpers -----------------------------------------------------

proc cmpAttrId*(attr: CmpAttrKind): uint16 =
  ## Runtime variant â€” allows deriveables and runtime code to use it.
  uint16(ord(attr))
