import ../../autogenerated/generated_nftnl
import ../../raii/expresions
import ./all # getU32, setU32

# ---------------------------------------------------------------------------
# nftnl "payload" expression attribute accessors
# ---------------------------------------------------------------------------

const
  idPayloadDreg* = uint16(NFTNL_EXPR_PAYLOAD_DREG)
  idPayloadBase* = uint16(NFTNL_EXPR_PAYLOAD_BASE)
  idPayloadOffset* = uint16(NFTNL_EXPR_PAYLOAD_OFFSET)
  idPayloadLen* = uint16(NFTNL_EXPR_PAYLOAD_LEN)
  # --- checksum-related fields (libnftnl >= 1.2.6) ---
  idPayloadCsumType* = uint16(NFTNL_EXPR_PAYLOAD_CSUM_TYPE)
  idPayloadCsumOffset* = uint16(NFTNL_EXPR_PAYLOAD_CSUM_OFFSET)
  idPayloadFlags* = uint16(NFTNL_EXPR_PAYLOAD_FLAGS)

# ---------------------------------------------------------------------------
# Ergonomic field-like accessors
# ---------------------------------------------------------------------------

proc base*(e: PayloadExpr): uint32 =
  ## Payload base (e.g., NFT_PAYLOAD_LL_HEADER, NFT_PAYLOAD_NETWORK_HEADER, etc.)
  getU32(toRaw(e), idPayloadBase)

proc `base=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadBase, v)

proc offset*(e: PayloadExpr): uint32 =
  ## Byte offset within the payload.
  getU32(toRaw(e), idPayloadOffset)

proc `offset=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadOffset, v)

proc len*(e: PayloadExpr): uint32 =
  ## Length of the payload slice in bytes.
  getU32(toRaw(e), idPayloadLen)

proc `len=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadLen, v)

proc dreg*(e: PayloadExpr): uint32 =
  ## Destination register to write payload data into.
  getU32(toRaw(e), idPayloadDreg)

proc `dreg=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadDreg, v)

# ---------------------------------------------------------------------------
# Optional checksum-related fields
# ---------------------------------------------------------------------------

proc csumType*(e: PayloadExpr): uint32 =
  ## Payload checksum type (e.g., NFT_PAYLOAD_CSUM_INET)
  getU32(toRaw(e), idPayloadCsumType)

proc `csumType=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadCsumType, v)

proc csumOffset*(e: PayloadExpr): uint32 =
  ## Payload checksum offset in bytes.
  getU32(toRaw(e), idPayloadCsumOffset)

proc `csumOffset=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadCsumOffset, v)

proc flags*(e: PayloadExpr): uint32 =
  ## Payload flags (e.g., NFT_PAYLOAD_L4CSUM_PSEUDOHDR, etc.)
  getU32(toRaw(e), idPayloadFlags)

proc `flags=`*(e: PayloadExpr, v: uint32) =
  setU32(toRaw(e), idPayloadFlags, v)
