# ===========================================================================
# ðŸ§© nftnl "bitwise" expression attribute accessors
# ===========================================================================

import ../../autogenerated/generated_nftnl
import ../../raii/expresions
import ./all # getU32, setU32, getBlob, setBlob

# ---------------------------------------------------------------------------
# Attribute IDs (mirroring libnftnl bitwise_attr_policy)
# ---------------------------------------------------------------------------
const
  idBitwiseSreg* = uint16(NFTNL_EXPR_BITWISE_SREG)
  idBitwiseDreg* = uint16(NFTNL_EXPR_BITWISE_DREG)
  idBitwiseLen* = uint16(NFTNL_EXPR_BITWISE_LEN)
  idBitwiseMask* = uint16(NFTNL_EXPR_BITWISE_MASK)
  idBitwiseXor* = uint16(NFTNL_EXPR_BITWISE_XOR)
  idBitwiseOp* = uint16(NFTNL_EXPR_BITWISE_OP)
  idBitwiseData* = uint16(NFTNL_EXPR_BITWISE_DATA)

# ---------------------------------------------------------------------------
# Ergonomic field-like accessors
# ---------------------------------------------------------------------------

proc sreg*(e: BitwiseExpr): uint32 =
  getU32(toRaw(e), idBitwiseSreg)

proc `sreg=`*(e: BitwiseExpr, v: uint32) =
  setU32(toRaw(e), idBitwiseSreg, v)

proc dreg*(e: BitwiseExpr): uint32 =
  getU32(toRaw(e), idBitwiseDreg)

proc `dreg=`*(e: BitwiseExpr, v: uint32) =
  setU32(toRaw(e), idBitwiseDreg, v)

proc len*(e: BitwiseExpr): uint32 =
  getU32(toRaw(e), idBitwiseLen)

proc `len=`*(e: BitwiseExpr, v: uint32) =
  setU32(toRaw(e), idBitwiseLen, v)

proc mask*(e: BitwiseExpr): seq[uint8] =
  getBlob(toRaw(e), idBitwiseMask)

proc `mask=`*(e: BitwiseExpr, v: seq[uint8]) =
  setBlob(toRaw(e), idBitwiseMask, v)

proc `xor`*(e: BitwiseExpr): seq[uint8] =
  getBlob(toRaw(e), idBitwiseXor)

proc `xor=`*(e: BitwiseExpr, v: seq[uint8]) =
  setBlob(toRaw(e), idBitwiseXor, v)

proc op*(e: BitwiseExpr): uint32 =
  getU32(toRaw(e), idBitwiseOp)

proc `op=`*(e: BitwiseExpr, v: uint32) =
  setU32(toRaw(e), idBitwiseOp, v)

proc data*(e: BitwiseExpr): seq[uint8] =
  getBlob(toRaw(e), idBitwiseData)

proc `data=`*(e: BitwiseExpr, v: seq[uint8]) =
  setBlob(toRaw(e), idBitwiseData, v)
