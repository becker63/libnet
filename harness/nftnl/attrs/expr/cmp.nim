import ../../autogenerated/generated_nftnl
import ../../../linux/autogenerated/generated_linux # for enum_nft_cmp_ops
import ../../raii/expresions
import ./all # getU32, getBlob, setU32, setBlob

# ---------------------------------------------------------------------------
# nftnl "cmp" expression attribute accessors
# ---------------------------------------------------------------------------

const
  idCmpSreg* = uint16(NFTNL_EXPR_CMP_SREG)
  idCmpOp* = uint16(NFTNL_EXPR_CMP_OP)
  idCmpData* = uint16(NFTNL_EXPR_CMP_DATA)

# --- ergonomic field-like accessors ----------------------------------------

proc sreg*(e: CmpExpr): uint32 =
  ## Source register for compare expression.
  getU32(toRaw(e), idCmpSreg)

proc `sreg=`*(e: CmpExpr, v: uint32) =
  setU32(toRaw(e), idCmpSreg, v)

proc op*(e: CmpExpr): enum_nft_cmp_ops =
  ## Comparison operator (==, !=, <, etc.)
  enum_nft_cmp_ops(getU32(toRaw(e), idCmpOp))

proc `op=`*(e: CmpExpr, v: enum_nft_cmp_ops) =
  setU32(toRaw(e), idCmpOp, v.uint32)

proc data*(e: CmpExpr): seq[uint8] =
  ## Raw byte sequence representing the constant being compared.
  getBlob(toRaw(e), idCmpData)

proc `data=`*(e: CmpExpr, v: seq[uint8]) =
  setBlob(toRaw(e), idCmpData, v)
