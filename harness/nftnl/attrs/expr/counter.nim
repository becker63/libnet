# ===========================================================================
# ðŸ§© nftnl "counter" expression attribute accessors
# ===========================================================================

import std/sequtils
import ../../autogenerated/generated_nftnl
import ../../raii/expresions
import ./all # getBlob, setBlob

# ---------------------------------------------------------------------------
# Attribute IDs (match libnftnl counter_attr_policy)
# ---------------------------------------------------------------------------
const
  idCtrPackets* = uint16(NFTNL_EXPR_CTR_PACKETS)
  idCtrBytes* = uint16(NFTNL_EXPR_CTR_BYTES)

# ---------------------------------------------------------------------------
# Helper procs for raw uint64 <-> seq[uint8] conversion
# ---------------------------------------------------------------------------

proc toBytes64*(v: uint64): seq[uint8] =
  ## Convert a uint64 into a raw 8-byte buffer (host-endian).
  result = newSeqWith(8, 0'u8)
  copyMem(addr result[0], unsafeAddr v, 8)

proc fromBytes64*(buf: openArray[uint8]): uint64 =
  ## Convert an 8-byte raw buffer into a uint64 (host-endian).
  if buf.len < 8:
    return 0'u64
  copyMem(addr result, unsafeAddr buf[0], 8)

# ---------------------------------------------------------------------------
# Ergonomic field-like accessors
# ---------------------------------------------------------------------------

proc packets*(e: CounterExpr): uint64 =
  ## Number of packets seen by this counter.
  fromBytes64(getBlob(toRaw(e), idCtrPackets))

proc `packets=`*(e: CounterExpr, v: uint64) =
  setBlob(toRaw(e), idCtrPackets, toBytes64(v))

proc bytes*(e: CounterExpr): uint64 =
  ## Number of bytes seen by this counter.
  fromBytes64(getBlob(toRaw(e), idCtrBytes))

proc `bytes=`*(e: CounterExpr, v: uint64) =
  setBlob(toRaw(e), idCtrBytes, toBytes64(v))
