import ../../autogenerated/generated_nftnl
import ../../raii/expresions
import ./all # getU32, setU32, getStr, setStr

# ---------------------------------------------------------------------------
# nftnl "meta" expression attribute accessors
# ---------------------------------------------------------------------------

const
  idMetaKey* = uint16(NFTNL_EXPR_META_KEY)
  idMetaDreg* = uint16(NFTNL_EXPR_META_DREG)
  idMetaSreg* = uint16(NFTNL_EXPR_META_SREG)

# ---------------------------------------------------------------------------
# Ergonomic field-like accessors
# ---------------------------------------------------------------------------

proc key*(e: MetaExpr): uint32 =
  ## Metadata key (e.g., NFT_META_MARK, NFT_META_IIFNAME, etc.)
  getU32(toRaw(e), idMetaKey)

proc `key=`*(e: MetaExpr, v: uint32) =
  setU32(toRaw(e), idMetaKey, v)

proc dreg*(e: MetaExpr): uint32 =
  ## Destination register for metadata load.
  getU32(toRaw(e), idMetaDreg)

proc `dreg=`*(e: MetaExpr, v: uint32) =
  setU32(toRaw(e), idMetaDreg, v)

proc sreg*(e: MetaExpr): uint32 =
  ## Source register for metadata store.
  getU32(toRaw(e), idMetaSreg)

proc `sreg=`*(e: MetaExpr, v: uint32) =
  setU32(toRaw(e), idMetaSreg, v)

# ---------------------------------------------------------------------------
# Optional string accessors (interface names, etc.)
# ---------------------------------------------------------------------------

proc str*(e: MetaExpr): string =
  ## Metadata string (used for iifname/oifname, etc.)
  getStr(toRaw(e), idMetaSreg)

proc `str=`*(e: MetaExpr, v: string) =
  setStr(toRaw(e), idMetaSreg, v)
