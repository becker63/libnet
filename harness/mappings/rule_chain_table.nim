import ../proto_raw as pbraw
import ../nftnl/autogenerated/generated_nftnl as gen_nftnl
import ../linux/autogenerated/generated_linux as gen_linux
import ../nftnl/raii/[basics, expresions]
import ../nftnl/attrs/[rule, chain, table]
import ./expr_map
import ./util
import ../messageBuilder

# Important, this is what adds rules
proc toNftnlRule*(x: pbraw.Rule): basics.Rule =
  let r = basics.Rule.create()
  r.family = x.family
  r.table = x.table
  r.chain = x.chain
  dbg "    → Rule(family=" & $x.family & ", table=" & x.table & ", chain=" & x.chain &
    ")"
  for ex in x.exprs:
    let e = toNftnlExpr(ex)
    if e.raw.isNil:
      dbg "      [skip] invalid expr; not adding"
      continue
    addExpr(r, e)
  r

proc toNftnlChain*(x: pbraw.Chain): basics.Chain =
  let c = basics.Chain.create()
  c.family = x.family
  c.table = x.table
  c.name = x.name
  c.typeName = x.`type`
  c.hooknum = x.hook
  c.prio = x.prio.uint32
  c.policy = x.policy
  dbg "  → Chain(" & x.name & ") table=" & x.table
  for r in x.rules:
    discard toNftnlRule(r)
  c

proc toNftnlTable*(x: pbraw.Table): basics.Table =
  let t = basics.Table.create()
  t.family = x.family
  t.name = x.name
  dbg "→ Table(" & x.name & ") family=" & $x.family
  for ch in x.chains:
    discard toNftnlChain(ch)
  t
